from django.shortcuts import render, redirect, HttpResponse
import csv
from .models import (
    ItemType, Armor, Category, Brand, Availability, ArmorCoverage, ArmorType
)
from .config import database


# Show armor list
def list(request):
    armors = Armor.objects.all().order_by('name')
    armor_count = 0
    if armors:
        armor_count = len(armors)

    categories = Category.objects.filter(type='ARMOR').order_by('name')
    brands = Brand.objects.filter(type='ARMOR').order_by('name')
    availabilities = Availability.choices
    armor_types = ArmorType.choices
    coverages = ArmorCoverage.choices

    context = {
        'armor_count': armor_count,
        'armors': armors,
        'categories': categories,
        'brands': brands,
        'availabilities': availabilities,
        'armor_types': armor_types,
        'coverages': coverages,
    }
        
    return render(request, 'equipment/armor.html', context)


# Create an armor
def create(request):
    form = request.POST
    category = Category.objects.get(id=form['category'])
    brand = Brand.objects.get(id=form['brand'])
    armor = Armor(
        name=form['name'],
        category=category,
        brand=brand,
        availability=form['availability'],
        coverage=form['coverage'],
        type=form['type'],
        sp=int(form['sp']) if form['sp'] != '' else None,
        ev=int(form['ev']) if form['ev'] != '' else None,
        weight=float(form['weight']),
        cost=int(form['cost']),
        description=form['description'],
        image=form['image'],
    )
    armor.save()

    return redirect('armor')


# Update an armor
def update(request):
    form = request.POST
    armor = Armor.objects.get(id=form['id'])
    category = Category.objects.get(id=form['category'])
    brand = Brand.objects.get(id=form['brand'])
    armor.name = form['name']
    armor.category = category
    armor.brand = brand
    armor.coverage = form['coverage']
    armor.type = form['type']
    armor.sp = int(form['sp']) if form['sp'] != '' else None
    armor.ev = int(form['ev']) if form['ev'] != '' else None
    armor.weight = float(form['weight'])
    armor.cost = int(form['cost'])
    armor.description = form['description']
    armor.image = form['image']
    armor.save()
    
    return redirect('armor')


# Delete an armor
def delete(request):
    form = request.POST
    armor = Armor.objects.get(id=form['id'])
    armor.delete()
    return redirect('armor')


# Upload armor list from CSV
def upload(request):
    csv_file = request.FILES['csv_file'].read().decode('utf-8').splitlines()
    csv_reader = csv.DictReader(csv_file)

    for row in csv_reader:
        category = Category.objects.get(name=row['category'], parent=None)
        brand, _ = Brand.objects.get_or_create(
            name=row['brand'], type=ItemType.ARMOR,
            defaults={'name': row['brand'], 'type': ItemType.ARMOR, 'description': 'Autogenerated'})

        Armor.objects.update_or_create(
            id=row['id'],
            defaults=dict(
                name=row['name'],
                category=category,
                brand=brand,
                availability=row['availability'],
                coverage=row['coverage'],
                type=row['type'],
                sp=int(row['sp']) if row['sp'] != '' else None,
                ev=int(row['ev']) if row['ev'] != '' else None,
                weight=float(row['weight']),
                cost=int(row['cost']),
                description=row['description'],
                image=row['image'],
            )
        )
        
    return redirect('armor')


# Download armor list in CSV
def download(request):
    armors = Armor.objects.all().order_by('name').values()
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="armors.csv"'
    csv_writer = csv.writer(response)
    headers = False

    armors_translated = []
    for armor in armors:
        armor_translated = {}
        keys = armor.keys()
        for key in keys:
            value = armor[key]
            if key == 'category_id':
                category = Category.objects.get(id=value)
                armor_translated['category'] = category.code
            elif key == 'brand_id': 
                brand = Brand.objects.get(id=value)
                armor_translated['brand'] = brand.name
            else:
                armor_translated[key] = value
        armors_translated.append(armor_translated)
    
    for armor in armors_translated:
        if not headers:
            csv_writer.writerow(armor.keys())
            headers = True
        csv_writer.writerow(armor.values())
        
    return response


# Refresh armor list with Firebase
def refresh(request):
    source = request.POST['source']
    firebase_object = database.child('Catalog/Armor')
    if source == 'local': 
        armor_local = Armor.objects.all().order_by('id').values()
        firebase_object.remove()
        for armor in armor_local:
            firebase_object.push(armor)
    else:
        armor_origin = firebase_object.get()
        for armor_id, armor in armor_origin:
            category = Category.objects.get(code=armor.category, parent=None)
            brand, _ = Brand.objects.get_or_create(
                name=armor.brand, 
                defaults={'name': armor.brand, 'type': ItemType.ARMOR, 'description': 'Autogenerated'})
            
            Armor.objects.update_or_create(
                id=armor_id,
                defaults=dict(
                    name=armor.name,
                    category=category,
                    brand=brand,
                    availability=armor.availability,
                    coverage=armor.coverage,
                    type=armor.typr,
                    sp=armor.sp,
                    ev=armor.ev,
                    weight=armor.weight,
                    cost=armor.cost,
                    description=armor.description,
                    image=armor.image,
                ),
            )

    return redirect('armor')
