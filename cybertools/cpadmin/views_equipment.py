from django.shortcuts import render, redirect, HttpResponse
import csv
from .models import (
    Weapon, Armor, ItemType, Category, Brand, Availability, Concealment, Reliability, ArmorType, Coverage
)
from .config import database


### Functions for Weapon Section

# Show weapon List
def weapons_list(request):
    weapons = Weapon.objects.all().order_by('name')
    weapons_count = 0
    if weapons:
        weapons_count = len(weapons)

    categories = Category.objects.filter(type='WEAPON').order_by('name')
    brands = Brand.objects.filter(type='WEAPON').order_by('name')
    availabilities = Availability.choices
    concealments = Concealment.choices
    reliabilities = Reliability.choices

    context = {
        'weapons_count': weapons_count,
        'weapons': weapons,
        'categories': categories,
        'brands': brands,
        'availabilities': availabilities,
        'concealments': concealments,
        'reliabilities': reliabilities,
    }
        
    return render(request, 'equipment/weapons.html', context)


# Create a weapon
def weapons_create(request):
    return redirect('weapons')


# Update a weapon
def weapons_update(request):
    return redirect('weapons')


# Delete a weapon
def weapons_delete(request):
    return redirect('weapons')


# Upload weapons list from CSV
def weapons_upload(request):
    csv_file = request.FILES['csv_file'].read().decode('utf-8').splitlines()
    csv_reader = csv.DictReader(csv_file)

    for row in csv_reader:
        category = Category.objects.get(code=row['category'], parent=None)
        brand, _ = Brand.objects.get_or_create(
            name=row['brand'], 
            defaults={'name': row['brand'], 
                      'description': 'Autogenerated'})

        Weapon.objects.update_or_create(
            id=row['id'],
            defaults=dict(
                name=row['name'],
                category=category,
                brand=brand,
                availability=row['availability'],
                concealment=row['concealment'],
                accuracy=row['accuracy'],
                reliability=row['reliability'],
                range=float(row['range']) if row['range'] != '' else None,
                shots=int(row['shots']) if row['shots'] != '' else None,
                rof=int(row['rof']) if row['shots'] != '' else None,
                damage=row['damage'],
                weight=float(row['weight']),
                cost=int(row['cost']),
                image=row['image'],
            )
        )

    return redirect('weapons')


# Download weapon list in CSV
def weapons_download(request):
    weapons = Weapon.objects.all().order_by('name').values()
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="weapons.csv"'
    csv_writer = csv.writer(response)
    headers = False

    weapons_translated = []
    for weapon in weapons:
        weapon_translated = {}
        keys = weapon.keys()
        for key in keys:
            value = weapon[key]
            if key == 'category_id':
                category = Category.objects.get(id=value)
                weapon_translated['category'] = category.code
            elif key == 'brand_id': 
                brand = Brand.objects.get(id=value)
                weapon_translated['brand'] = brand.name
            else:
                weapon_translated[key] = value
        weapons_translated.append(weapon_translated)
    
    for weapon in weapons_translated:
        if not headers:
            csv_writer.writerow(weapon.keys())
            headers = True
        csv_writer.writerow(weapon.values())
        
    return response


# Refresh weapons list with CSV
def weapons_refresh(request):
    source = request.POST['source']
    if source == 'local': 
        weapons_local = Weapon.objects.all().order_by('id').values()
        database.child('weapons').remove()
        for weapon in weapons_local:
            database.child('weapons').push(weapon)
                
    else:
        weapons_origin = database.child('weapons').get()
        for weapon_id, weapon in weapons_origin:
            category = Category.objects.get(code=weapon.category, parent=None)
            brand, _ = Brand.objects.get_or_create(
                name=weapon.brand, 
                defaults={'name': weapon.brand, 
                        'description': 'Autogenerated'})
            
            Weapon.objects.update_or_create(
                id=weapon_id,
                defaults=dict(
                    name=weapon.name,
                    category=category,
                    brand=brand,
                    availability=weapon.availability,
                    concealment=weapon.concealment,
                    accuracy=weapon.accuracy,
                    reliability=weapon.realiability,
                    range=weapon.range,
                    shots=weapon.shots,
                    rof=weapon.rof,
                    damage=weapon.damage,
                    weight=weapon.weight,
                    cost=weapon.cost,
                    image=weapon.image,
                ),
            )
            
    return redirect('weapons')

    
### Functions for Armor Section

# Show armor list
def armor_list(request):
    armors = Armor.objects.all().order_by('name')
    armor_count = 0
    if armors:
        armor_count = len(armors)

    categories = Category.objects.filter(type='ARMOR').order_by('name')
    brands = Brand.objects.filter(type='ARMOR').order_by('name')
    availabilities = Availability.choices
    armor_types = ArmorType.choices
    coverages = Coverage.choices

    context = {
        'armor_count': armor_count,
        'armors': armors,
        'categories': categories,
        'brands': brands,
        'availabilities': availabilities,
        'armor_types': armor_types,
        'coverages': coverages,
    }
        
    return render(request, 'equipment/armor.html', context)


# Create an armor
def armor_create(request):
    return redirect('armor')


# Update an armor
def armor_update(request):
    return redirect('armor')


# Delete an armor
def armor_delete(request):
    return redirect('armor')


# Upload armor List from CSV
def armor_upload(request):
    return redirect('armor')


# Download armor List in CSV
def armor_download(request):
    return redirect('armor')


# Refresh armor List with CSV
def armor_refresh(request):
    return redirect('armor')
