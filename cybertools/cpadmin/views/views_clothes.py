from django.shortcuts import render, redirect, HttpResponse
import csv
from cpadmin.models import (
    ItemType, Category, Brand, Availability, Clothes
)
from cpadmin.config import get_database, get_type, get_translated_object, download_csv


# Show clothes list
def list(request):
    clothess = Clothes.objects.all().order_by('name')
    clothes_count = 0
    if clothess:
        clothes_count = len(clothess)

    categories = Category.objects.filter(type='CLOTHES').order_by('name')
    brands = Brand.objects.filter(type='CLOTHES').order_by('name')
    availabilities = Availability.choices
    clothes_types = Clothes.Type.choices

    context = {
        'page_title': 'Moda',
        'clothes_count': clothes_count,
        'clothess': clothess,
        'categories': categories,
        'brands': brands,
        'availabilities': availabilities,
        'clothes_types': clothes_types,
    }
        
    return render(request, 'equipment/clothes.html', context)


# Create an clothes
def create(request):
    form = request.POST
    category = Category.objects.get(id=form['category'])
    brand = Brand.objects.get(id=form['brand'])
    clothes = Clothes(
        name=form['name'],
        category=category,
        brand=brand,
        availability=form['availability'],
        type=form['type'],
        weight=float(form['weight']),
        cost=int(form['cost']),
        description=form['description'],
        image=form['image'],
    )
    clothes.save()

    return redirect('clothes')


# Update an clothes
def update(request):
    form = request.POST
    clothes = Clothes.objects.get(id=form['id'])
    category = Category.objects.get(id=form['category'])
    brand = Brand.objects.get(id=form['brand'])
    clothes.name = form['name']
    clothes.category = category
    clothes.brand = brand
    clothes.type = form['type']
    clothes.weight = float(form['weight'])
    clothes.cost = int(form['cost'])
    clothes.description = form['description']
    clothes.image = form['image']
    clothes.save()
    
    return redirect('clothes')


# Delete an clothes
def delete(request):
    form = request.POST
    clothes = Clothes.objects.get(id=form['id'])
    clothes.delete()
    return redirect('clothes')


# Upload clothes list from CSV
def upload(request):
    csv_file = request.FILES['csv_file'].read().decode('utf-8').splitlines()
    csv_reader = csv.DictReader(csv_file)

    for row in csv_reader:
        category = Category.objects.get(name=row['category'], type=ItemType.CLOTHES, parent=None)
        brand, _ = Brand.objects.get_or_create(
            name=row['brand'], type=ItemType.CLOTHES,
            defaults={'name': row['brand'], 'type': ItemType.CLOTHES, 'description': 'Autogenerated'})

        Clothes.objects.update_or_create(
            id=row['id'],
            defaults=dict(
                name=row['name'],
                category=category,
                brand=brand,
                availability=row['availability'],
                type=row['type'],
                weight=float(row['weight']),
                cost=int(row['cost']),
                description=row['description'],
                image=row['image'],
            )
        )
        
    return redirect('clothes')


# Download clothes list in CSV
def download(request):
    clothess = Clothes.objects.all().order_by('name').values()
    return download_csv(Clothes, clothess)


# Refresh clothes list with Firebase
def refresh(request):
    database = get_database()
    if database is None:
        return redirect('clothes') 
    source = request.POST['source']
    if source == 'local': 
        clothes_local = Clothes.objects.all().order_by('id').values()
        database.child('Catalog/Clothes').remove()
        for clothes in clothes_local:
            database.child('Catalog/Clothes').push(clothes)
    else:
        clothes_origin = database.child('Catalog/Clothes').get()
        for clothes_id, clothes in clothes_origin:
            category = Category.objects.get(code=clothes.category, parent=None)
            brand, _ = Brand.objects.get_or_create(
                name=clothes.brand, 
                defaults={'name': clothes.brand, 'type': ItemType.CLOTHES, 'description': 'Autogenerated'})
            
            Clothes.objects.update_or_create(
                id=clothes_id,
                defaults=dict(
                    name=clothes.name,
                    category=category,
                    brand=brand,
                    availability=clothes.availability,
                    type=clothes.type,
                    weight=clothes.weight,
                    cost=clothes.cost,
                    description=clothes.description,
                    image=clothes.image,
                ),
            )

    return redirect('clothes')
